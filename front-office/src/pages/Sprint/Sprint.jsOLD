import React, {Component} from 'react'
/*
import {sortableContainer, sortableElement} from 'react-sortable-hoc';
import arrayMove from 'array-move';
const SortableItem = sortableElement(({value}) => <li>{value}</li>);
const SortableContainer = sortableContainer(({children}) => {
    return <ul>{children}</ul>;
});
*/

import { Grid } from "react-virtualized";
import { SortableContainer, arrayMove } from "react-sortable-hoc";

// import cellRangeRenderer from "./cellRangeRenderer";
import SortableCellRangeRender from "../components/SortableCellRangeRender";

function Display(props) {
    const { list } = props;
    const cellRenderer = ({ columnIndex, key, rowIndex, style }) => (
        <div key={key} style={style}>
            {list[rowIndex][columnIndex]}
        </div>
    );
    return (
        <Grid
            {...props}
            cellRenderer={cellRenderer}
            cellRangeRenderer={SortableCellRangeRender}
            columnCount={list[0].length}
            columnWidth={100}
            height={300}
            rowCount={list.length}
            rowHeight={30}
            width={300}
        />
    );
}

const SortableDisplay = SortableContainer(Display);


class Sprint extends Component {
    /*
    state = {
        items: ['Item 1', 'Item 2', 'Item 3', 'Item 4', 'Item 5', 'Item 6'],
    };

    onSortEnd = ({oldIndex, newIndex}) => {
        this.setState(({items}) => ({
            items: arrayMove(items, oldIndex, newIndex),
        }));
    };

    render() {
        const {items} = this.state;

        return (
            <div className="mt-40">
                <SortableContainer onSortEnd={this.onSortEnd}>
                    {items.map((value, index) => (
                        <SortableItem key={`item-${value}`} index={index} value={value} />
                    ))}
                </SortableContainer>
            </div>
        );
    }
    */

    constructor(props) {
        super(props);
        this.state = {
            list: [
                ["col0", "col1"],
                ["h0", "heading0"],
                ["h1", "heading1"],
                ["h2", "heading2"]
            ]
        };
    }
    onSortEnd = ({ oldIndex, newIndex }) => {
        this.setState({ list: arrayMove(this.state.list, oldIndex, newIndex) });
    };
    render() {
        return (
            <div className="mt-40">
                <SortableDisplay
                    lockAxis="y"
                    onSortEnd={this.onSortEnd}
                    list={this.state.list}
                />
            </div>
        );
    }
}

export default Sprint;